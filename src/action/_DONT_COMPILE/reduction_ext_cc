#include "reduction_ext_h"
// #include "svd.hpp"

using namespace arma;

field<mat> SVD2ACTIONred(sp_mat &S, field<mat> SVD_results)
{
    stdout_printf("SVD => ACTIONred (sparse)\n");
    FLUSH;
    int n = S.n_rows;
    int dim = SVD_results(0).n_cols;

    // Update 1: Orthogonalize columns w.r.t. background (mean)
    vec mu = vec(mean(S, 1));
    vec v = mu / norm(mu, 2);
    vec a1 = v;
    vec b1 = -trans(S) * v;

    // Update 2: Center columns of orthogonalized matrix before performing SVD
    vec c = vec(trans(mean(S, 0)));
    double a1_mean = mean(a1);
    vec a2 = ones(S.n_rows);
    vec b2 = -(a1_mean * b1 + c);

    mat A = join_rows(a1, a2);
    mat B = join_rows(b1, b2);

    field<mat> perturbed_SVD = perturbedSVD(SVD_results, A, B);

    return perturbed_SVD;
}

field<mat> SVD2ACTIONred(mat &S, field<mat> SVD_results)
{
    stdout_printf("SVD => ACTIONred (dense)\n");
    FLUSH;
    int n = S.n_rows;
    int dim = SVD_results(0).n_cols;

    // Update 1: Orthogonalize columns w.r.t. background (mean)
    vec mu = vec(mean(S, 1));
    vec v = mu / norm(mu, 2);
    vec a1 = v;
    vec b1 = -trans(S) * v;

    // Update 2: Center columns of orthogonalized matrix before performing SVD
    vec c = vec(trans(mean(S, 0)));
    double a1_mean = mean(a1);
    vec a2 = ones(S.n_rows);
    vec b2 = -(a1_mean * b1 + c);

    mat A = join_rows(a1, a2);
    mat B = join_rows(b1, b2);

    field<mat> perturbed_SVD = perturbedSVD(SVD_results, A, B);

    return perturbed_SVD;
}

field<mat> PCA2ACTIONred(sp_mat &S, field<mat> PCA_results)
{
    stdout_printf("Reverting column-centering ... ");
    field<mat> SVD_results = PCA2SVD(S, PCA_results);
    stdout_printf("done\n");
    FLUSH;

    field<mat> output = SVD2ACTIONred(S, SVD_results);
    return output;
}

field<mat> PCA2ACTIONred(mat &S, field<mat> PCA_results)
{
    stdout_printf("Reverting column-centering ... ");
    field<mat> SVD_results = PCA2SVD(S, PCA_results);
    stdout_printf("done\n");
    FLUSH;

    field<mat> output = SVD2ACTIONred(S, SVD_results);
    return output;
}

field<mat> ACTIONred2SVD(field<mat> SVD_results)
{
stdout_printf("ACTION kernel => SVD\n");
FLUSH;

mat A = -1 * SVD_results(3); // Reverting
mat B = SVD_results(4);

field<mat> perturbed_SVD = perturbedSVD(SVD_results, A, B);

return perturbed_SVD;
}
